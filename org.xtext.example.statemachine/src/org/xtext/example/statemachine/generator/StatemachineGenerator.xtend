/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.statemachine.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.statemachine.statemachine.AbstractState
import org.xtext.example.statemachine.statemachine.Activity
import org.xtext.example.statemachine.statemachine.State
import org.xtext.example.statemachine.statemachine.StateMachine
import org.xtext.example.statemachine.statemachine.Transition

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class StatemachineGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val machine = resource.contents.filter(StateMachine).head
		val text = generate(machine);
		val fileName = resource.URI.trimFileExtension.appendFileExtension("plantuml").lastSegment
		fsa.generateFile(fileName, text);
	}
		
	def String generate(StateMachine machine) '''
		@startuml
		«FOR state : machine.states.filter(State)»
			«generate(state)»
		«ENDFOR»
		«FOR transition : machine.transitions»
			«generate(transition)»
		«ENDFOR»
		@enduml
	'''
	
	def String generate(State state) '''
		state «state.label»«IF !state.states.isEmpty || !state.transitions.isEmpty || !state.activities.isEmpty» {
			«FOR activity : state.activities»
				«state.name» : «generate(activity)»
			«ENDFOR»
			«FOR nestedState : state.states.filter(State)»
				«generate(nestedState)»
			«ENDFOR»
			«FOR transition : state.transitions»
				«generate(transition)»
			«ENDFOR»
		}
		«ENDIF»
	'''

	def String generate(Transition transition) '''
		«transition.start.label» -> «transition.end.label»«IF transition.activity !== null» : «generate(transition.activity)»«ENDIF»
	'''
	
	def String generate(Activity activity) '''
		«IF activity.trigger != "none"»«activity.trigger»«ENDIF»«IF activity.condition !== null» [«activity.condition»]«ENDIF»«IF activity.action !== null» / «activity.action»«ENDIF»
	'''
	
	def String getLabel(AbstractState state) '''
		«IF state instanceof State»«state.name»«ELSE»[*]«ENDIF»'''

}
