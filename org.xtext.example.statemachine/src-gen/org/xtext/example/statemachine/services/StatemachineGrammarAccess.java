/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.statemachine.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class StatemachineGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.statemachine.Statemachine.StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMachineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStatesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStatesAbstractStateParserRuleCall_3_1_0 = (RuleCall)cStatesAssignment_3_1.eContents().get(0);
		private final Assignment cTransitionsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cTransitionsTransitionParserRuleCall_3_2_0 = (RuleCall)cTransitionsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//StateMachine:
		//	'state' 'machine' name=ID ('{'
		//	states+=AbstractState*
		//	transitions+=Transition*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'state' 'machine' name=ID ('{'
		//states+=AbstractState*
		//transitions+=Transition*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//'state'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//'machine'
		public Keyword getMachineKeyword_1() { return cMachineKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('{'
		//states+=AbstractState*
		//transitions+=Transition*
		//'}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }
		
		//states+=AbstractState*
		public Assignment getStatesAssignment_3_1() { return cStatesAssignment_3_1; }
		
		//AbstractState
		public RuleCall getStatesAbstractStateParserRuleCall_3_1_0() { return cStatesAbstractStateParserRuleCall_3_1_0; }
		
		//transitions+=Transition*
		public Assignment getTransitionsAssignment_3_2() { return cTransitionsAssignment_3_2; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_3_2_0() { return cTransitionsTransitionParserRuleCall_3_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}
	public class AbstractStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.statemachine.Statemachine.AbstractState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInitialStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFinalStateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractState:
		//	State | InitialState | FinalState;
		@Override public ParserRule getRule() { return rule; }
		
		//State | InitialState | FinalState
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//State
		public RuleCall getStateParserRuleCall_0() { return cStateParserRuleCall_0; }
		
		//InitialState
		public RuleCall getInitialStateParserRuleCall_1() { return cInitialStateParserRuleCall_1; }
		
		//FinalState
		public RuleCall getFinalStateParserRuleCall_2() { return cFinalStateParserRuleCall_2; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.statemachine.Statemachine.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActivitiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActivitiesActivityParserRuleCall_2_1_0 = (RuleCall)cActivitiesAssignment_2_1.eContents().get(0);
		private final Assignment cStatesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cStatesAbstractStateParserRuleCall_2_2_0 = (RuleCall)cStatesAssignment_2_2.eContents().get(0);
		private final Assignment cTransitionsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cTransitionsTransitionParserRuleCall_2_3_0 = (RuleCall)cTransitionsAssignment_2_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//State:
		//	'state' name=ID ('{'
		//	activities+=Activity*
		//	states+=AbstractState*
		//	transitions+=Transition*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'state' name=ID ('{'
		//activities+=Activity*
		//states+=AbstractState*
		//transitions+=Transition*
		//'}')?
		public Group getGroup() { return cGroup; }
		
		//'state'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('{'
		//activities+=Activity*
		//states+=AbstractState*
		//transitions+=Transition*
		//'}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }
		
		//activities+=Activity*
		public Assignment getActivitiesAssignment_2_1() { return cActivitiesAssignment_2_1; }
		
		//Activity
		public RuleCall getActivitiesActivityParserRuleCall_2_1_0() { return cActivitiesActivityParserRuleCall_2_1_0; }
		
		//states+=AbstractState*
		public Assignment getStatesAssignment_2_2() { return cStatesAssignment_2_2; }
		
		//AbstractState
		public RuleCall getStatesAbstractStateParserRuleCall_2_2_0() { return cStatesAbstractStateParserRuleCall_2_2_0; }
		
		//transitions+=Transition*
		public Assignment getTransitionsAssignment_2_3() { return cTransitionsAssignment_2_3; }
		
		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_2_3_0() { return cTransitionsTransitionParserRuleCall_2_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
	}
	public class InitialStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.statemachine.Statemachine.InitialState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInitialKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//InitialState:
		//	'initial' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'initial' name=ID
		public Group getGroup() { return cGroup; }
		
		//'initial'
		public Keyword getInitialKeyword_0() { return cInitialKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class FinalStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.statemachine.Statemachine.FinalState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFinalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FinalState:
		//	'final' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'final' name=ID
		public Group getGroup() { return cGroup; }
		
		//'final'
		public Keyword getFinalKeyword_0() { return cFinalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.statemachine.Statemachine.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cStartAbstractStateCrossReference_0_0 = (CrossReference)cStartAssignment_0.eContents().get(0);
		private final RuleCall cStartAbstractStateIDTerminalRuleCall_0_0_1 = (RuleCall)cStartAbstractStateCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEndAbstractStateCrossReference_2_0 = (CrossReference)cEndAssignment_2.eContents().get(0);
		private final RuleCall cEndAbstractStateIDTerminalRuleCall_2_0_1 = (RuleCall)cEndAbstractStateCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActivityAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActivityActivityParserRuleCall_3_1_0 = (RuleCall)cActivityAssignment_3_1.eContents().get(0);
		
		//Transition:
		//	start=[AbstractState] '->' end=[AbstractState] (':' activity=Activity)?;
		@Override public ParserRule getRule() { return rule; }
		
		//start=[AbstractState] '->' end=[AbstractState] (':' activity=Activity)?
		public Group getGroup() { return cGroup; }
		
		//start=[AbstractState]
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//[AbstractState]
		public CrossReference getStartAbstractStateCrossReference_0_0() { return cStartAbstractStateCrossReference_0_0; }
		
		//ID
		public RuleCall getStartAbstractStateIDTerminalRuleCall_0_0_1() { return cStartAbstractStateIDTerminalRuleCall_0_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//end=[AbstractState]
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }
		
		//[AbstractState]
		public CrossReference getEndAbstractStateCrossReference_2_0() { return cEndAbstractStateCrossReference_2_0; }
		
		//ID
		public RuleCall getEndAbstractStateIDTerminalRuleCall_2_0_1() { return cEndAbstractStateIDTerminalRuleCall_2_0_1; }
		
		//(':' activity=Activity)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//activity=Activity
		public Assignment getActivityAssignment_3_1() { return cActivityAssignment_3_1; }
		
		//Activity
		public RuleCall getActivityActivityParserRuleCall_3_1_0() { return cActivityActivityParserRuleCall_3_1_0; }
	}
	public class ActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.statemachine.Statemachine.Activity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTriggerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTriggerIDTerminalRuleCall_0_0 = (RuleCall)cTriggerAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConditionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditionSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cConditionAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSolidusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cActionAssignment_2_1.eContents().get(0);
		
		//Activity:
		//	trigger=ID ('[' condition=STRING ']')? ('/' action=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//trigger=ID ('[' condition=STRING ']')? ('/' action=STRING)?
		public Group getGroup() { return cGroup; }
		
		//trigger=ID
		public Assignment getTriggerAssignment_0() { return cTriggerAssignment_0; }
		
		//ID
		public RuleCall getTriggerIDTerminalRuleCall_0_0() { return cTriggerIDTerminalRuleCall_0_0; }
		
		//('[' condition=STRING ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//condition=STRING
		public Assignment getConditionAssignment_1_1() { return cConditionAssignment_1_1; }
		
		//STRING
		public RuleCall getConditionSTRINGTerminalRuleCall_1_1_0() { return cConditionSTRINGTerminalRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
		
		//('/' action=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'/'
		public Keyword getSolidusKeyword_2_0() { return cSolidusKeyword_2_0; }
		
		//action=STRING
		public Assignment getActionAssignment_2_1() { return cActionAssignment_2_1; }
		
		//STRING
		public RuleCall getActionSTRINGTerminalRuleCall_2_1_0() { return cActionSTRINGTerminalRuleCall_2_1_0; }
	}
	
	
	private final StateMachineElements pStateMachine;
	private final AbstractStateElements pAbstractState;
	private final StateElements pState;
	private final InitialStateElements pInitialState;
	private final FinalStateElements pFinalState;
	private final TransitionElements pTransition;
	private final ActivityElements pActivity;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StatemachineGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStateMachine = new StateMachineElements();
		this.pAbstractState = new AbstractStateElements();
		this.pState = new StateElements();
		this.pInitialState = new InitialStateElements();
		this.pFinalState = new FinalStateElements();
		this.pTransition = new TransitionElements();
		this.pActivity = new ActivityElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.statemachine.Statemachine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StateMachine:
	//	'state' 'machine' name=ID ('{'
	//	states+=AbstractState*
	//	transitions+=Transition*
	//	'}')?;
	public StateMachineElements getStateMachineAccess() {
		return pStateMachine;
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}
	
	//AbstractState:
	//	State | InitialState | FinalState;
	public AbstractStateElements getAbstractStateAccess() {
		return pAbstractState;
	}
	
	public ParserRule getAbstractStateRule() {
		return getAbstractStateAccess().getRule();
	}
	
	//State:
	//	'state' name=ID ('{'
	//	activities+=Activity*
	//	states+=AbstractState*
	//	transitions+=Transition*
	//	'}')?;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//InitialState:
	//	'initial' name=ID;
	public InitialStateElements getInitialStateAccess() {
		return pInitialState;
	}
	
	public ParserRule getInitialStateRule() {
		return getInitialStateAccess().getRule();
	}
	
	//FinalState:
	//	'final' name=ID;
	public FinalStateElements getFinalStateAccess() {
		return pFinalState;
	}
	
	public ParserRule getFinalStateRule() {
		return getFinalStateAccess().getRule();
	}
	
	//Transition:
	//	start=[AbstractState] '->' end=[AbstractState] (':' activity=Activity)?;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Activity:
	//	trigger=ID ('[' condition=STRING ']')? ('/' action=STRING)?;
	public ActivityElements getActivityAccess() {
		return pActivity;
	}
	
	public ParserRule getActivityRule() {
		return getActivityAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
