/*
 * generated by Xtext 2.24.0
 */
package org.xtext.example.statemachine.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.statemachine.ide.contentassist.antlr.internal.InternalStatemachineParser;
import org.xtext.example.statemachine.services.StatemachineGrammarAccess;

public class StatemachineParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(StatemachineGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, StatemachineGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAbstractStateAccess().getAlternatives(), "rule__AbstractState__Alternatives");
			builder.put(grammarAccess.getStateMachineAccess().getGroup(), "rule__StateMachine__Group__0");
			builder.put(grammarAccess.getStateMachineAccess().getGroup_3(), "rule__StateMachine__Group_3__0");
			builder.put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
			builder.put(grammarAccess.getStateAccess().getGroup_2(), "rule__State__Group_2__0");
			builder.put(grammarAccess.getInitialStateAccess().getGroup(), "rule__InitialState__Group__0");
			builder.put(grammarAccess.getFinalStateAccess().getGroup(), "rule__FinalState__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup_3(), "rule__Transition__Group_3__0");
			builder.put(grammarAccess.getActivityAccess().getGroup(), "rule__Activity__Group__0");
			builder.put(grammarAccess.getActivityAccess().getGroup_1(), "rule__Activity__Group_1__0");
			builder.put(grammarAccess.getActivityAccess().getGroup_2(), "rule__Activity__Group_2__0");
			builder.put(grammarAccess.getStateMachineAccess().getNameAssignment_2(), "rule__StateMachine__NameAssignment_2");
			builder.put(grammarAccess.getStateMachineAccess().getStatesAssignment_3_1(), "rule__StateMachine__StatesAssignment_3_1");
			builder.put(grammarAccess.getStateMachineAccess().getTransitionsAssignment_3_2(), "rule__StateMachine__TransitionsAssignment_3_2");
			builder.put(grammarAccess.getStateAccess().getNameAssignment_1(), "rule__State__NameAssignment_1");
			builder.put(grammarAccess.getStateAccess().getActivitiesAssignment_2_1(), "rule__State__ActivitiesAssignment_2_1");
			builder.put(grammarAccess.getStateAccess().getStatesAssignment_2_2(), "rule__State__StatesAssignment_2_2");
			builder.put(grammarAccess.getStateAccess().getTransitionsAssignment_2_3(), "rule__State__TransitionsAssignment_2_3");
			builder.put(grammarAccess.getInitialStateAccess().getNameAssignment_1(), "rule__InitialState__NameAssignment_1");
			builder.put(grammarAccess.getFinalStateAccess().getNameAssignment_1(), "rule__FinalState__NameAssignment_1");
			builder.put(grammarAccess.getTransitionAccess().getStartAssignment_0(), "rule__Transition__StartAssignment_0");
			builder.put(grammarAccess.getTransitionAccess().getEndAssignment_2(), "rule__Transition__EndAssignment_2");
			builder.put(grammarAccess.getTransitionAccess().getActivityAssignment_3_1(), "rule__Transition__ActivityAssignment_3_1");
			builder.put(grammarAccess.getActivityAccess().getTriggerAssignment_0(), "rule__Activity__TriggerAssignment_0");
			builder.put(grammarAccess.getActivityAccess().getConditionAssignment_1_1(), "rule__Activity__ConditionAssignment_1_1");
			builder.put(grammarAccess.getActivityAccess().getActionAssignment_2_1(), "rule__Activity__ActionAssignment_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private StatemachineGrammarAccess grammarAccess;

	@Override
	protected InternalStatemachineParser createParser() {
		InternalStatemachineParser result = new InternalStatemachineParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public StatemachineGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(StatemachineGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
